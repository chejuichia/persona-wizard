'use client'

import { useState, useRef, useEffect } from 'react'
import { Play, Pause, Loader2, RefreshCw } from 'lucide-react'

interface PreviewResponse {
  status: string
  url: string
  duration_seconds?: number
  size_px: number
  fps: number
}

export function PreviewPlayer() {
  const [preview, setPreview] = useState<PreviewResponse | null>(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [playing, setPlaying] = useState(false)
  const videoRef = useRef<HTMLVideoElement>(null)

  const generatePreview = async () => {
    try {
      setLoading(true)
      setError(null)

      const response = await fetch('http://localhost:8000/preview/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt: 'Hello, this is a sample preview generated by Persona Wizard!',
          use_sample: true,
        }),
      })

      if (!response.ok) {
        throw new Error(`Preview generation failed: ${response.status}`)
      }

      const data = await response.json()
      setPreview(data)

    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to generate preview')
    } finally {
      setLoading(false)
    }
  }

  const togglePlay = () => {
    if (videoRef.current) {
      if (playing) {
        videoRef.current.pause()
      } else {
        videoRef.current.play()
      }
      setPlaying(!playing)
    }
  }

  useEffect(() => {
    // Auto-generate preview on mount
    generatePreview()
  }, [])

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64 bg-gray-100 rounded-lg">
        <div className="text-center">
          <Loader2 className="w-8 h-8 animate-spin mx-auto mb-2 text-indigo-600" />
          <p className="text-gray-600">Generating preview...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="flex items-center justify-center h-64 bg-red-50 rounded-lg">
        <div className="text-center">
          <div className="text-red-600 mb-2">⚠️</div>
          <p className="text-red-800 mb-4">{error}</p>
          <button
            onClick={generatePreview}
            className="inline-flex items-center px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
          >
            <RefreshCw className="w-4 h-4 mr-2" />
            Try Again
          </button>
        </div>
      </div>
    )
  }

  if (!preview) {
    return (
      <div className="flex items-center justify-center h-64 bg-gray-100 rounded-lg">
        <button
          onClick={generatePreview}
          className="inline-flex items-center px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700"
        >
          <Play className="w-4 h-4 mr-2" />
          Generate Preview
        </button>
      </div>
    )
  }

  return (
    <div className="space-y-4">
      <div className="relative bg-black rounded-lg overflow-hidden">
        <video
          ref={videoRef}
          src={`http://localhost:8000${preview.url}`}
          className="w-full h-64 object-cover"
          onPlay={() => setPlaying(true)}
          onPause={() => setPlaying(false)}
          onEnded={() => setPlaying(false)}
        />
        
        {/* Play/Pause overlay */}
        <div className="absolute inset-0 flex items-center justify-center">
          <button
            onClick={togglePlay}
            className="bg-black bg-opacity-50 text-white rounded-full p-3 hover:bg-opacity-70 transition-all"
          >
            {playing ? (
              <Pause className="w-6 h-6" />
            ) : (
              <Play className="w-6 h-6" />
            )}
          </button>
        </div>
      </div>

      {/* Video info */}
      <div className="text-sm text-gray-600">
        <div className="flex justify-between">
          <span>Duration: {preview.duration_seconds?.toFixed(1)}s</span>
          <span>Size: {preview.size_px}px</span>
          <span>FPS: {preview.fps}</span>
        </div>
      </div>

      {/* Regenerate button */}
      <div className="text-center">
        <button
          onClick={generatePreview}
          disabled={loading}
          className="inline-flex items-center px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 disabled:opacity-50"
        >
          <RefreshCw className="w-4 h-4 mr-2" />
          Generate New Preview
        </button>
      </div>
    </div>
  )
}
